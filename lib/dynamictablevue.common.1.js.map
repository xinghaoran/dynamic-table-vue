{"version":3,"sources":["webpack://dynamictablevue/fs (ignored)","webpack://dynamictablevue/util (ignored)?2adc","webpack://dynamictablevue/buffer (ignored)?6488","webpack://dynamictablevue/crypto (ignored)","webpack://dynamictablevue/stream (ignored)","webpack://dynamictablevue/util (ignored)?2b10","webpack://dynamictablevue/util (ignored)","webpack://dynamictablevue/util (ignored)?f0aa","webpack://dynamictablevue/buffer (ignored)","webpack://dynamictablevue/crypto (ignored)?5c35","webpack://dynamictablevue/util (ignored)?8a04","webpack://dynamictablevue/util (ignored)?c2ab","webpack://dynamictablevue/buffer (ignored)?b11e","webpack://dynamictablevue/./src/utils/util.js","webpack://dynamictablevue/./src/utils/vendor/Export2Excel.js"],"names":[],"mappings":";;;;;AAAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;ACAA,e;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA,CAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,G;;ACZA;AACA,mBAAO,CAAC,MAA0B;AACL;AACQ;;AAErC;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAI;AACzB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,iBAAiB,cAAI;AACrB;AACA,OAAO;;AAEP;AACA;AACA;AACA,yCAAyC,cAAI;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,cAAI;AAClB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA,IAAI,eAAE;AACC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,KAAK;AACN;AACA;AACA;AACA;AACA;AACA;;;AAGA,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,cAAI;AAC7B,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,qBAAqB;AACxC,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,eAAE;AACJ,EAAE,eAAE;;AAEJ;AACA;AACA;AACA;;AAEA;AACA,cAAc,cAAI,OAAO,eAAE;AAC3B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG,MAAM,SAAS,GAAG,SAAS;AAC9B,EAAE,eAAE;AACJ;;AAEO;AACP,iBAAiB,qBAAqB;AACtC;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA,iBAAiB,wBAAwB;AACzC,mBAAmB,2BAA2B;AAC9C;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA,GAAG;AACH;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA,C","file":"dynamictablevue.common.1.js","sourcesContent":["/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/**\r\n * Determine if it is a number\r\n * @param val\r\n */\r\n export function isNumber (val) {\r\n    var regPos = /^\\d+(\\.\\d+)?$/ // 非负浮点数\r\n    var regNeg = /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/ // 负浮点数\r\n    if (regPos.test(val) || regNeg.test(val)) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }","/* eslint-disable */\r\nrequire('script-loader!file-saver');\r\nimport XLSX from 'xlsx-style'\r\nimport {isNumber} from '@/utils/util'\r\n\r\nfunction generateArray(table) {\r\n  var out = [];\r\n  var rows = table.querySelectorAll('tr');\r\n  var ranges = [];\r\n  for (var R = 0; R < rows.length; ++R) {\r\n    var outRow = [];\r\n    var row = rows[R];\r\n    var columns = row.querySelectorAll('td');\r\n    for (var C = 0; C < columns.length; ++C) {\r\n      var cell = columns[C];\r\n      var colspan = cell.getAttribute('colspan');\r\n      var rowspan = cell.getAttribute('rowspan');\r\n      var cellValue = cell.innerText;\r\n      if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue;\r\n\r\n      //Skip ranges\r\n      ranges.forEach(function (range) {\r\n        if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\r\n          for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);\r\n        }\r\n      });\r\n\r\n      //Handle Row Span\r\n      if (rowspan || colspan) {\r\n        rowspan = rowspan || 1;\r\n        colspan = colspan || 1;\r\n        ranges.push({\r\n          s: {\r\n            r: R,\r\n            c: outRow.length\r\n          },\r\n          e: {\r\n            r: R + rowspan - 1,\r\n            c: outRow.length + colspan - 1\r\n          }\r\n        });\r\n      };\r\n\r\n      //Handle Value\r\n      outRow.push(cellValue !== \"\" ? cellValue : null);\r\n\r\n      //Handle Colspan\r\n      if (colspan)\r\n        for (var k = 0; k < colspan - 1; ++k) outRow.push(null);\r\n    }\r\n    out.push(outRow);\r\n  }\r\n  return [out, ranges];\r\n};\r\n\r\nfunction datenum(v, date1904) {\r\n  if (date1904) v += 1462;\r\n  var epoch = Date.parse(v);\r\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n}\r\n\r\nfunction sheet_from_array_of_arrays(data, headerLength) {\r\n  var ws = {};\r\n  var range = {\r\n    s: {\r\n      c: 10000000,\r\n      r: 10000000\r\n    },\r\n    e: {\r\n      c: 0,\r\n      r: 0\r\n    }\r\n  };\r\n  \r\n  for (var R = 0; R != data.length; ++R) {\r\n    for (var C = 0; C != data[R].length; ++C) {\r\n      if (range.s.r > R) range.s.r = R;\r\n      if (range.s.c > C) range.s.c = C;\r\n      if (range.e.r < R) range.e.r = R;\r\n      if (range.e.c < C) range.e.c = C;\r\n      if(isNumber(data[R][C])){\r\n        data[R][C] -= 0\r\n      }\r\n      var cell = {\r\n        v: data[R][C],\r\n        s: {\r\n          alignment: {\r\n            /// 自动换行\r\n            // wrapText: 1,\r\n              // 居中\r\n            horizontal: \"center\",\r\n            vertical: \"center\",\r\n            // indent: 0\r\n          }\r\n        }\r\n      };\r\n      if (cell.v == null) continue;\r\n      var cell_ref = XLSX.utils.encode_cell({\r\n        c: C,\r\n        r: R\r\n      });\r\n\r\n      if (typeof cell.v === 'number') cell.t = 'n';\r\n      else if (typeof cell.v === 'boolean') cell.t = 'b';\r\n      else if (cell.v instanceof Date) {\r\n        cell.t = 'n';\r\n        cell.z = XLSX.SSF._table[14];\r\n        cell.v = datenum(cell.v);\r\n      } else cell.t = 's';\r\n\r\n      ws[cell_ref] = cell;\r\n    }\r\n  }\r\n  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);\r\n  return ws;\r\n}\r\n\r\nfunction Workbook() {\r\n  if (!(this instanceof Workbook)) return new Workbook();\r\n  this.SheetNames = [];\r\n  this.Sheets = {};\r\n}\r\n\r\nfunction s2ab(s) {\r\n  var buf = new ArrayBuffer(s.length);\r\n  var view = new Uint8Array(buf);\r\n  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\r\n  return buf;\r\n}\r\n\r\nexport function export_table_to_excel(id) {\r\n  var theTable = document.getElementById(id);\r\n  var oo = generateArray(theTable);\r\n  var ranges = oo[1];\r\n\r\n  /* original data */\r\n  var data = oo[0];\r\n  var ws_name = \"SheetJS\";\r\n\r\n  var wb = new Workbook(),\r\n    ws = sheet_from_array_of_arrays(data);\r\n\r\n  /* add ranges to worksheet */\r\n  // ws['!cols'] = ['apple', 'banan'];\r\n  ws['!merges'] = ranges;\r\n\r\n  /* add worksheet to workbook */\r\n  wb.SheetNames.push(ws_name);\r\n  wb.Sheets[ws_name] = ws;\r\n\r\n  var wbout = XLSX.write(wb, {\r\n    bookType: 'xlsx',\r\n    bookSST: false,\r\n    type: 'binary'\r\n  });\r\n\r\n  saveAs(new Blob([s2ab(wbout)], {\r\n    type: \"application/octet-stream\"\r\n  }), \"test.xlsx\")\r\n}\r\n\r\nvar wb = new Workbook();\r\nexport function export_json_to_excel({\r\n  multiHeader = [],\r\n  header,\r\n  data,\r\n  filename,\r\n  merges = [],\r\n  autoWidth = true,\r\n  bookType = 'xlsx',\r\n  sheetName = \"Sheet1\",\r\n  lastSheet = true\r\n} = {}) {\r\n  /* original data */\r\n  filename = filename || 'excel-list'\r\n  data = [...data]\r\n  if(header.length !== 0){\r\n    data.unshift(header);\r\n  }\r\n  \r\n\r\n  for (let i = multiHeader.length - 1; i > -1; i--) {\r\n    data.unshift(multiHeader[i])\r\n  }\r\n\r\n  var ws_name = sheetName;\r\n  var ws = sheet_from_array_of_arrays(data, data.length + multiHeader.length);\r\n\r\n  if (merges.length > 0) {\r\n    if (!ws['!merges']) ws['!merges'] = [];\r\n    merges.forEach(item => {\r\n      ws['!merges'].push(XLSX.utils.decode_range(item))\r\n    })\r\n  }\r\n\r\n  if (autoWidth) {\r\n    /*设置worksheet每列的最大宽度*/\r\n    const colWidth = data.map(row => row.map(val => {\r\n      /*先判断是否为null/undefined*/\r\n      if (val == null) {\r\n        return {\r\n          'wch': 10\r\n        };\r\n      }\r\n      /*再判断是否为中文*/\r\n      else if (val.toString().charCodeAt(0) > 255) {\r\n        return {\r\n          'wch': val.toString().length * 2\r\n        };\r\n      } else {\r\n        return {\r\n          'wch': val.toString().length\r\n        };\r\n      }\r\n    }))\r\n    /*以第一行为初始值*/\r\n    let result = colWidth[0];\r\n    for (let i = 1; i < colWidth.length; i++) {\r\n      for (let j = 0; j < colWidth[i].length; j++) {\r\n        if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n          result[j]['wch'] = colWidth[i][j]['wch'];\r\n        }\r\n      }\r\n    }\r\n    ws['!cols'] = result;\r\n  }\r\n\r\n  /* add worksheet to workbook */\r\n  wb.SheetNames.push(ws_name);\r\n  wb.Sheets[ws_name] = ws;\r\n\r\n  if(lastSheet){\r\n    writeExcel(filename, bookType)\r\n  }\r\n}\r\n\r\nfunction writeExcel(filename, bookType){\r\n  var wbout = XLSX.write(wb, {\r\n    bookType: bookType,\r\n    bookSST: false,\r\n    type: 'binary'\r\n  });\r\n  saveAs(new Blob([s2ab(wbout)], {\r\n    type: \"application/octet-stream\"\r\n  }), `${filename}.${bookType}`);\r\n  wb = new Workbook()\r\n}\r\n\r\nexport function processMergeHeader(multiLineNumber, columns, multiHeader, headerLetters, merges){\r\n  for (let i = 0; i < multiLineNumber; i++) {\r\n    multiHeader.push([])\r\n  }\r\n  for (let i = 0; i < columns.length; i++) {\r\n    columns2multiHeader(columns[i], multiHeader, 0, multiLineNumber)\r\n  }\r\n  for (let i = 0; i < multiHeader.length; i++) {\r\n    for (let j = 0; j < multiHeader[0].length; j++) {\r\n      if (multiHeader[i][j] === '') {\r\n        let flag = false\r\n        for (let c = i - 1; c >= 0; c--) {\r\n          if (multiHeader[c][j] !== '') {\r\n            merges.push(headerLetters[j] + (c + 1) + ':' + headerLetters[j] + (i + 1))\r\n            flag = true\r\n            break\r\n          }\r\n        }\r\n        if (!flag) {\r\n          for (let r = j - 1; r >= 0; r--) {\r\n            if (multiHeader[i][r] !== '') {\r\n              merges.push(headerLetters[r] + (i + 1) + ':' + headerLetters[j] + (i + 1))\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const alreadyExist = []\r\n  for (let m = merges.length - 1; m >= 0; m--) {\r\n    let flag = false\r\n    for (let j = 0; j < alreadyExist.length; j++) {\r\n      const mer = merges[m].split(':')\r\n      const alr = alreadyExist[j].split(':')\r\n      if (mer[0] === alr[0]) {\r\n        flag = true\r\n        break\r\n      }\r\n    }\r\n    if (!flag) {\r\n      alreadyExist.push(merges[m])\r\n    }\r\n  }\r\n  return alreadyExist\r\n}\r\n\r\nfunction columns2multiHeader (column, multiHeader, rowNum, multiLineNumber) {\r\n  const col = column\r\n  if (typeof col.children !== 'undefined') {\r\n    multiHeader[rowNum].push(col.title)\r\n    rowNum++\r\n    for (let n = 0; n < col.children.length; n++) {\r\n      columns2multiHeader(col.children[n], multiHeader, rowNum, multiLineNumber)\r\n    }\r\n  } else {\r\n    multiHeader[rowNum].push(col.title)\r\n    for (let j = 0; j < rowNum; j++) {\r\n      const before = multiHeader[j].length\r\n      const now = multiHeader[rowNum].length\r\n      if (before !== now) {\r\n        for (let n = 0; n < now - before; n++) {\r\n          multiHeader[j].push('')\r\n        }\r\n      }\r\n    }\r\n    for (let j = rowNum + 1; j < multiLineNumber; j++) {\r\n      multiHeader[j].push('')\r\n    }\r\n  }\r\n}"],"sourceRoot":""}